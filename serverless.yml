service: redqueen
provider:
  name: aws
  runtime: nodejs8.10
  environment: 
    AWS_REGION : ${file(./serverless.env.yml):dev.AWS_REGION}
    AWS_ACCOUNTID : ${file(./serverless.env.yml):dev.AWS_ACCOUNTID}
    SQS_QUEUE_NAME : ${file(./serverless.env.yml):dev.SQS_QUEUE_NAME}
    GIPHY_API : ${file(./serverless.env.yml):dev.GIPHY_API}
    RDS_HOSTNAME : ${file(./serverless.env.yml):dev.RDS_HOSTNAME}
    RDS_USERNAME : ${file(./serverless.env.yml):dev.RDS_USERNAME}
    RDS_PASSWORD : ${file(./serverless.env.yml):dev.RDS_PASSWORD}
    RDS_PORT : ${file(./serverless.env.yml):dev.RDS_PORT}
    RDS_DATABASE : ${file(./serverless.env.yml):dev.RDS_DATABASE}
  region: ${env:AWS_REGION}
  iamRoleStatements:
  - Effect: Allow
    Action:
      - sqs:*
    Resource: arn:aws:sqs:${env:AWS_REGION}:${env:AWS_ACCOUNTID}:${env:SQS_QUEUE_NAME}
functions:
  # hello:
  #   handler: src/handler.hello
  #   events:
  #   - schedule: ${self:custom.globalSchedule}
  #   - http: 
  #       method: get
  #       path: hello
  # cron:
  #   handler: src/cron.default
  #   events:
  #     - schedule: rate(1 minute) 
  # secondCron:
  #   handler: src/secondCron.default
  #   events:
      # Invoke Lambda function every 2nd minute from Mon-Fri
      # - schedule: cron(0/2 * ? * MON-FRI *)
  worker:
    handler: src/worker.sendMessagetoSQS
    events:
      - schedule: rate(1 minute) 
      - sqs:
          arn: arn:aws:sqs:${env:AWS_REGION}:${env:AWS_ACCOUNTID}:${env:SQS_QUEUE_NAME}
          batchSize: 1
    description: fetch & get data then send msg to SQS

resources:
  Resources:
    redqueen:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${env:SQS_QUEUE_NAME}
